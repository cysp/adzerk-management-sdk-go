// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// AdType defines model for AdType.
type AdType struct {
	Height int32   `json:"Height"`
	Id     int32   `json:"Id"`
	Name   *string `json:"Name,omitempty"`
	Width  int32   `json:"Width"`
}

// AdTypeList defines model for AdTypeList.
type AdTypeList struct {
	Items      []AdType `json:"items"`
	Page       int32    `json:"page"`
	PageSize   int32    `json:"pageSize"`
	TotalItems int64    `json:"totalItems"`
	TotalPages int32    `json:"totalPages"`
}

// Channel defines model for Channel.
type Channel struct {
	AdTypes []int32 `json:"AdTypes"`
	CPM     float32 `json:"CPM"`
	// Deprecated:
	Commission *float32 `json:"Commission,omitempty"`
	// Deprecated:
	CustomTargeting *string `json:"CustomTargeting,omitempty"`
	Engine          *string `json:"Engine,omitempty"`
	Id              int32   `json:"Id"`
	IsDeleted       *bool   `json:"IsDeleted,omitempty"`
	// Deprecated:
	Keywords *string `json:"Keywords,omitempty"`
	Title    string  `json:"Title"`
}

// ChannelList defines model for ChannelList.
type ChannelList struct {
	ChannelIds []int32 `json:"ChannelIds"`
}

// ChannelSiteMap defines model for ChannelSiteMap.
type ChannelSiteMap struct {
	ChannelId int32 `json:"ChannelId"`
	// Deprecated:
	FixedPaymentAmount *float32 `json:"FixedPaymentAmount,omitempty"`
	Priority           *int32   `json:"Priority,omitempty"`
	SiteId             int32    `json:"SiteId"`
}

// ChannelSiteMapList defines model for ChannelSiteMapList.
type ChannelSiteMapList struct {
	Items      []ChannelSiteMap `json:"items"`
	Page       int32            `json:"page"`
	PageSize   int32            `json:"pageSize"`
	TotalItems int64            `json:"totalItems"`
	TotalPages int32            `json:"totalPages"`
}

// Priority defines model for Priority.
type Priority struct {
	ChannelId                         *int32   `json:"ChannelId,omitempty"`
	FloorPrice                        *float32 `json:"FloorPrice,omitempty"`
	Id                                int32    `json:"Id"`
	IsAdChain                         bool     `json:"IsAdChain"`
	IsAdChainOptimized                bool     `json:"IsAdChainOptimized"`
	IsAdChainOrdered                  bool     `json:"IsAdChainOrdered"`
	IsAuction                         bool     `json:"IsAuction"`
	IsDeleted                         bool     `json:"IsDeleted"`
	IsKeywordOptimized                *bool    `json:"IsKeywordOptimized,omitempty"`
	IsSecondPricing                   *bool    `json:"IsSecondPricing,omitempty"`
	Name                              string   `json:"Name"`
	PassbackTimeout                   *int32   `json:"PassbackTimeout,omitempty"`
	RelevancyScoreConfig              *string  `json:"RelevancyScoreConfig,omitempty"`
	RelevancyScoreConfigJSON          *string  `json:"RelevancyScoreConfigJSON,omitempty"`
	SelectionAlgorithm                int32    `json:"SelectionAlgorithm"`
	SerializeRelevancyScoreConfigJSON *bool    `json:"SerializeRelevancyScoreConfigJSON,omitempty"`
	Weight                            *int32   `json:"Weight,omitempty"`
}

// Site defines model for Site.
type Site struct {
	Id            int32    `json:"Id"`
	IsDeleted     *bool    `json:"IsDeleted,omitempty"`
	NetworkMargin *float32 `json:"NetworkMargin,omitempty"`
	// Deprecated:
	PublisherAccountId *int32 `json:"PublisherAccountId,omitempty"`
	Title              string `json:"Title"`
	Url                string `json:"Url"`
}

// SiteList defines model for SiteList.
type SiteList struct {
	Items      []Site `json:"items"`
	Page       int32  `json:"page"`
	PageSize   int32  `json:"pageSize"`
	TotalItems int64  `json:"totalItems"`
	TotalPages int32  `json:"totalPages"`
}

// Zone defines model for Zone.
type Zone struct {
	Id        int32  `json:"Id"`
	IsDeleted *bool  `json:"IsDeleted,omitempty"`
	Name      string `json:"Name"`
	SiteId    int32  `json:"SiteId"`
}

// ZoneList defines model for ZoneList.
type ZoneList struct {
	Items      []Zone `json:"items"`
	Page       int32  `json:"page"`
	PageSize   int32  `json:"pageSize"`
	TotalItems int64  `json:"totalItems"`
	TotalPages int32  `json:"totalPages"`
}

// ListAdTypesParams defines parameters for ListAdTypes.
type ListAdTypesParams struct {
	// PageSize The size of the page to be returned
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Page The page number to be returned
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
}

// CreateAdTypeJSONBody defines parameters for CreateAdType.
type CreateAdTypeJSONBody struct {
	Height int32   `json:"Height"`
	Name   *string `json:"Name,omitempty"`
	Width  int32   `json:"Width"`
}

// ListChannelsParams defines parameters for ListChannels.
type ListChannelsParams struct {
	// PageSize The size of the page to be returned
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Page The page number to be returned
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
}

// CreateChannelJSONBody defines parameters for CreateChannel.
type CreateChannelJSONBody struct {
	AdTypes   []int32  `json:"AdTypes"`
	CPM       *float32 `json:"CPM,omitempty"`
	Engine    int32    `json:"Engine"`
	IsDeleted *bool    `json:"IsDeleted,omitempty"`
	Title     string   `json:"Title"`
}

// ListForChannelAdTypeParams defines parameters for ListForChannelAdType.
type ListForChannelAdTypeParams struct {
	// PageSize The size of the page to be returned
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Page The page number to be returned
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
}

// CreateForChannelAdTypeJSONBody defines parameters for CreateForChannelAdType.
type CreateForChannelAdTypeJSONBody struct {
	Height int32   `json:"Height"`
	Name   *string `json:"Name,omitempty"`
	Width  int32   `json:"Width"`
}

// UpdateChannelJSONBody defines parameters for UpdateChannel.
type UpdateChannelJSONBody struct {
	AdTypes []int32 `json:"AdTypes"`
	Engine  int32   `json:"Engine"`
	Id      int32   `json:"Id"`
	Title   string  `json:"Title"`
}

// ListChannelSiteMapsParams defines parameters for ListChannelSiteMaps.
type ListChannelSiteMapsParams struct {
	// PageSize The size of the page to be returned
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Page The page number to be returned
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
}

// CreateChannelSiteMapJSONBody defines parameters for CreateChannelSiteMap.
type CreateChannelSiteMapJSONBody struct {
	ChannelId int32 `json:"channelId"`
	Priority  int32 `json:"priority"`
	SiteId    int32 `json:"siteId"`
}

// UpdateChannelSiteMapJSONBody defines parameters for UpdateChannelSiteMap.
type UpdateChannelSiteMapJSONBody struct {
	ChannelId int32 `json:"channelId"`
	Priority  int32 `json:"priority"`
	SiteId    int32 `json:"siteId"`
}

// FilterSiteParams defines parameters for FilterSite.
type FilterSiteParams struct {
	// TitleLike Filters the stream of sites based on the Title. This is a simple match - if the string provided in the query parameter is present anywhere in a site's Title, that site will be returned in the results.
	TitleLike *string `form:"titleLike,omitempty" json:"titleLike,omitempty"`

	// UrlLike Filters the stream of sites based on the Url. This is a simple match - if the string provided in the query parameter is present anywhere in a site's Url, that site will be returned in the results.
	UrlLike *string `form:"urlLike,omitempty" json:"urlLike,omitempty"`
}

// ListSitesParams defines parameters for ListSites.
type ListSitesParams struct {
	// PageSize The size of the page to be returned
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Page The page number to be returned
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
}

// CreateSiteJSONBody defines parameters for CreateSite.
type CreateSiteJSONBody struct {
	IsDeleted     *bool    `json:"IsDeleted,omitempty"`
	NetworkMargin *float32 `json:"NetworkMargin,omitempty"`
	Title         string   `json:"Title"`
	URL           string   `json:"URL"`
}

// UpdateSiteJSONBody defines parameters for UpdateSite.
type UpdateSiteJSONBody struct {
	Id            int32    `json:"Id"`
	IsDeleted     *bool    `json:"IsDeleted,omitempty"`
	NetworkMargin *float32 `json:"NetworkMargin,omitempty"`
	Title         string   `json:"Title"`
	URL           string   `json:"URL"`
}

// ListZonesParams defines parameters for ListZones.
type ListZonesParams struct {
	// PageSize The size of the page to be returned
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Page The page number to be returned
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
}

// CreateZoneJSONBody defines parameters for CreateZone.
type CreateZoneJSONBody struct {
	IsDeleted *bool  `json:"IsDeleted,omitempty"`
	Name      string `json:"Name"`
	SiteId    *int32 `json:"SiteId,omitempty"`
}

// UpdateZoneJSONBody defines parameters for UpdateZone.
type UpdateZoneJSONBody struct {
	Id        int32  `json:"Id"`
	IsDeleted *bool  `json:"IsDeleted,omitempty"`
	Name      string `json:"Name"`
	SiteId    *int32 `json:"SiteId,omitempty"`
}

// CreateAdTypeJSONRequestBody defines body for CreateAdType for application/json ContentType.
type CreateAdTypeJSONRequestBody CreateAdTypeJSONBody

// CreateChannelJSONRequestBody defines body for CreateChannel for application/json ContentType.
type CreateChannelJSONRequestBody CreateChannelJSONBody

// CreateForChannelAdTypeJSONRequestBody defines body for CreateForChannelAdType for application/json ContentType.
type CreateForChannelAdTypeJSONRequestBody CreateForChannelAdTypeJSONBody

// UpdateChannelJSONRequestBody defines body for UpdateChannel for application/json ContentType.
type UpdateChannelJSONRequestBody UpdateChannelJSONBody

// CreateChannelSiteMapJSONRequestBody defines body for CreateChannelSiteMap for application/json ContentType.
type CreateChannelSiteMapJSONRequestBody CreateChannelSiteMapJSONBody

// UpdateChannelSiteMapJSONRequestBody defines body for UpdateChannelSiteMap for application/json ContentType.
type UpdateChannelSiteMapJSONRequestBody UpdateChannelSiteMapJSONBody

// CreateSiteJSONRequestBody defines body for CreateSite for application/json ContentType.
type CreateSiteJSONRequestBody CreateSiteJSONBody

// UpdateSiteJSONRequestBody defines body for UpdateSite for application/json ContentType.
type UpdateSiteJSONRequestBody UpdateSiteJSONBody

// CreateZoneJSONRequestBody defines body for CreateZone for application/json ContentType.
type CreateZoneJSONRequestBody CreateZoneJSONBody

// UpdateZoneJSONRequestBody defines body for UpdateZone for application/json ContentType.
type UpdateZoneJSONRequestBody UpdateZoneJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListAdTypes request
	ListAdTypes(ctx context.Context, params *ListAdTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAdTypeWithBody request with any body
	CreateAdTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAdType(ctx context.Context, body CreateAdTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdType request
	DeleteAdType(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListChannels request
	ListChannels(ctx context.Context, params *ListChannelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateChannelWithBody request with any body
	CreateChannelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateChannel(ctx context.Context, body CreateChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListForChannelAdType request
	ListForChannelAdType(ctx context.Context, channelId int32, params *ListForChannelAdTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateForChannelAdTypeWithBody request with any body
	CreateForChannelAdTypeWithBody(ctx context.Context, channelId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateForChannelAdType(ctx context.Context, channelId int32, body CreateForChannelAdTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteForChannelAdType request
	DeleteForChannelAdType(ctx context.Context, channelId int32, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChannelSiteMap request
	GetChannelSiteMap(ctx context.Context, channelId int32, siteId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChannelSiteMap request
	DeleteChannelSiteMap(ctx context.Context, channelId int32, siteId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChannel request
	GetChannel(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateChannelWithBody request with any body
	UpdateChannelWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateChannel(ctx context.Context, id int32, body UpdateChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChannel request
	DeleteChannel(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPrioritiesChannel request
	GetPrioritiesChannel(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListChannelSiteMaps request
	ListChannelSiteMaps(ctx context.Context, params *ListChannelSiteMapsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateChannelSiteMapWithBody request with any body
	CreateChannelSiteMapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateChannelSiteMap(ctx context.Context, body CreateChannelSiteMapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateChannelSiteMapWithBody request with any body
	UpdateChannelSiteMapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateChannelSiteMap(ctx context.Context, body UpdateChannelSiteMapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListChannelsForSiteChannelSiteMap request
	ListChannelsForSiteChannelSiteMap(ctx context.Context, siteId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FilterSite request
	FilterSite(ctx context.Context, params *FilterSiteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSites request
	ListSites(ctx context.Context, params *ListSitesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSiteWithBody request with any body
	CreateSiteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSite(ctx context.Context, body CreateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSite request
	GetSite(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSiteWithBody request with any body
	UpdateSiteWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSite(ctx context.Context, id int32, body UpdateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListZones request
	ListZones(ctx context.Context, params *ListZonesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateZoneWithBody request with any body
	CreateZoneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateZone(ctx context.Context, body CreateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZone request
	GetZone(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateZoneWithBody request with any body
	UpdateZoneWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateZone(ctx context.Context, id int32, body UpdateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListAdTypes(ctx context.Context, params *ListAdTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAdTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAdTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAdTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAdType(ctx context.Context, body CreateAdTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAdTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdType(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListChannels(ctx context.Context, params *ListChannelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListChannelsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChannelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChannelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChannel(ctx context.Context, body CreateChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChannelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListForChannelAdType(ctx context.Context, channelId int32, params *ListForChannelAdTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListForChannelAdTypeRequest(c.Server, channelId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateForChannelAdTypeWithBody(ctx context.Context, channelId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateForChannelAdTypeRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateForChannelAdType(ctx context.Context, channelId int32, body CreateForChannelAdTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateForChannelAdTypeRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteForChannelAdType(ctx context.Context, channelId int32, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteForChannelAdTypeRequest(c.Server, channelId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannelSiteMap(ctx context.Context, channelId int32, siteId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChannelSiteMapRequest(c.Server, channelId, siteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChannelSiteMap(ctx context.Context, channelId int32, siteId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChannelSiteMapRequest(c.Server, channelId, siteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannel(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChannelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateChannelWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateChannelRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateChannel(ctx context.Context, id int32, body UpdateChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateChannelRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChannel(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChannelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPrioritiesChannel(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPrioritiesChannelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListChannelSiteMaps(ctx context.Context, params *ListChannelSiteMapsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListChannelSiteMapsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChannelSiteMapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChannelSiteMapRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChannelSiteMap(ctx context.Context, body CreateChannelSiteMapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChannelSiteMapRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateChannelSiteMapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateChannelSiteMapRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateChannelSiteMap(ctx context.Context, body UpdateChannelSiteMapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateChannelSiteMapRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListChannelsForSiteChannelSiteMap(ctx context.Context, siteId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListChannelsForSiteChannelSiteMapRequest(c.Server, siteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilterSite(ctx context.Context, params *FilterSiteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilterSiteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSites(ctx context.Context, params *ListSitesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSitesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSiteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSiteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSite(ctx context.Context, body CreateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSiteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSite(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSiteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSiteWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSiteRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSite(ctx context.Context, id int32, body UpdateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSiteRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListZones(ctx context.Context, params *ListZonesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListZonesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateZoneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateZoneRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateZone(ctx context.Context, body CreateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateZoneRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZone(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateZoneWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateZoneRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateZone(ctx context.Context, id int32, body UpdateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateZoneRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAdTypesRequest generates requests for ListAdTypes
func NewListAdTypesRequest(server string, params *ListAdTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/adtypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAdTypeRequest calls the generic CreateAdType builder with application/json body
func NewCreateAdTypeRequest(server string, body CreateAdTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAdTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAdTypeRequestWithBody generates requests for CreateAdType with any type of body
func NewCreateAdTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/adtypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdTypeRequest generates requests for DeleteAdType
func NewDeleteAdTypeRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/adtypes/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListChannelsRequest generates requests for ListChannels
func NewListChannelsRequest(server string, params *ListChannelsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateChannelRequest calls the generic CreateChannel builder with application/json body
func NewCreateChannelRequest(server string, body CreateChannelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateChannelRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateChannelRequestWithBody generates requests for CreateChannel with any type of body
func NewCreateChannelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListForChannelAdTypeRequest generates requests for ListForChannelAdType
func NewListForChannelAdTypeRequest(server string, channelId int32, params *ListForChannelAdTypeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelId", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/%s/adtypes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateForChannelAdTypeRequest calls the generic CreateForChannelAdType builder with application/json body
func NewCreateForChannelAdTypeRequest(server string, channelId int32, body CreateForChannelAdTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateForChannelAdTypeRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewCreateForChannelAdTypeRequestWithBody generates requests for CreateForChannelAdType with any type of body
func NewCreateForChannelAdTypeRequestWithBody(server string, channelId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelId", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/%s/adtypes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteForChannelAdTypeRequest generates requests for DeleteForChannelAdType
func NewDeleteForChannelAdTypeRequest(server string, channelId int32, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelId", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/%s/adtypes/%s/delete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChannelSiteMapRequest generates requests for GetChannelSiteMap
func NewGetChannelSiteMapRequest(server string, channelId int32, siteId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelId", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "siteId", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/%s/site/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteChannelSiteMapRequest generates requests for DeleteChannelSiteMap
func NewDeleteChannelSiteMapRequest(server string, channelId int32, siteId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelId", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "siteId", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/%s/site/%s/delete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChannelRequest generates requests for GetChannel
func NewGetChannelRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateChannelRequest calls the generic UpdateChannel builder with application/json body
func NewUpdateChannelRequest(server string, id int32, body UpdateChannelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateChannelRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateChannelRequestWithBody generates requests for UpdateChannel with any type of body
func NewUpdateChannelRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteChannelRequest generates requests for DeleteChannel
func NewDeleteChannelRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPrioritiesChannelRequest generates requests for GetPrioritiesChannel
func NewGetPrioritiesChannelRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/%s/priorities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListChannelSiteMapsRequest generates requests for ListChannelSiteMaps
func NewListChannelSiteMapsRequest(server string, params *ListChannelSiteMapsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channelSite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateChannelSiteMapRequest calls the generic CreateChannelSiteMap builder with application/json body
func NewCreateChannelSiteMapRequest(server string, body CreateChannelSiteMapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateChannelSiteMapRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateChannelSiteMapRequestWithBody generates requests for CreateChannelSiteMap with any type of body
func NewCreateChannelSiteMapRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channelSite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateChannelSiteMapRequest calls the generic UpdateChannelSiteMap builder with application/json body
func NewUpdateChannelSiteMapRequest(server string, body UpdateChannelSiteMapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateChannelSiteMapRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateChannelSiteMapRequestWithBody generates requests for UpdateChannelSiteMap with any type of body
func NewUpdateChannelSiteMapRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channelSite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListChannelsForSiteChannelSiteMapRequest generates requests for ListChannelsForSiteChannelSiteMap
func NewListChannelsForSiteChannelSiteMapRequest(server string, siteId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "siteId", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channelsInSite/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFilterSiteRequest generates requests for FilterSite
func NewFilterSiteRequest(server string, params *FilterSiteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/fast/site")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TitleLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "titleLike", runtime.ParamLocationQuery, *params.TitleLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UrlLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "urlLike", runtime.ParamLocationQuery, *params.UrlLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSitesRequest generates requests for ListSites
func NewListSitesRequest(server string, params *ListSitesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/site")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSiteRequest calls the generic CreateSite builder with application/json body
func NewCreateSiteRequest(server string, body CreateSiteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSiteRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSiteRequestWithBody generates requests for CreateSite with any type of body
func NewCreateSiteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/site")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSiteRequest generates requests for GetSite
func NewGetSiteRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/site/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSiteRequest calls the generic UpdateSite builder with application/json body
func NewUpdateSiteRequest(server string, id int32, body UpdateSiteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSiteRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateSiteRequestWithBody generates requests for UpdateSite with any type of body
func NewUpdateSiteRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/site/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListZonesRequest generates requests for ListZones
func NewListZonesRequest(server string, params *ListZonesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/zone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateZoneRequest calls the generic CreateZone builder with application/json body
func NewCreateZoneRequest(server string, body CreateZoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateZoneRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateZoneRequestWithBody generates requests for CreateZone with any type of body
func NewCreateZoneRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/zone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetZoneRequest generates requests for GetZone
func NewGetZoneRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/zone/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateZoneRequest calls the generic UpdateZone builder with application/json body
func NewUpdateZoneRequest(server string, id int32, body UpdateZoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateZoneRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateZoneRequestWithBody generates requests for UpdateZone with any type of body
func NewUpdateZoneRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/zone/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAdTypesWithResponse request
	ListAdTypesWithResponse(ctx context.Context, params *ListAdTypesParams, reqEditors ...RequestEditorFn) (*ListAdTypesResponse, error)

	// CreateAdTypeWithBodyWithResponse request with any body
	CreateAdTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAdTypeResponse, error)

	CreateAdTypeWithResponse(ctx context.Context, body CreateAdTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAdTypeResponse, error)

	// DeleteAdTypeWithResponse request
	DeleteAdTypeWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAdTypeResponse, error)

	// ListChannelsWithResponse request
	ListChannelsWithResponse(ctx context.Context, params *ListChannelsParams, reqEditors ...RequestEditorFn) (*ListChannelsResponse, error)

	// CreateChannelWithBodyWithResponse request with any body
	CreateChannelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateChannelResponse, error)

	CreateChannelWithResponse(ctx context.Context, body CreateChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateChannelResponse, error)

	// ListForChannelAdTypeWithResponse request
	ListForChannelAdTypeWithResponse(ctx context.Context, channelId int32, params *ListForChannelAdTypeParams, reqEditors ...RequestEditorFn) (*ListForChannelAdTypeResponse, error)

	// CreateForChannelAdTypeWithBodyWithResponse request with any body
	CreateForChannelAdTypeWithBodyWithResponse(ctx context.Context, channelId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateForChannelAdTypeResponse, error)

	CreateForChannelAdTypeWithResponse(ctx context.Context, channelId int32, body CreateForChannelAdTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateForChannelAdTypeResponse, error)

	// DeleteForChannelAdTypeWithResponse request
	DeleteForChannelAdTypeWithResponse(ctx context.Context, channelId int32, id int32, reqEditors ...RequestEditorFn) (*DeleteForChannelAdTypeResponse, error)

	// GetChannelSiteMapWithResponse request
	GetChannelSiteMapWithResponse(ctx context.Context, channelId int32, siteId int32, reqEditors ...RequestEditorFn) (*GetChannelSiteMapResponse, error)

	// DeleteChannelSiteMapWithResponse request
	DeleteChannelSiteMapWithResponse(ctx context.Context, channelId int32, siteId int32, reqEditors ...RequestEditorFn) (*DeleteChannelSiteMapResponse, error)

	// GetChannelWithResponse request
	GetChannelWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetChannelResponse, error)

	// UpdateChannelWithBodyWithResponse request with any body
	UpdateChannelWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateChannelResponse, error)

	UpdateChannelWithResponse(ctx context.Context, id int32, body UpdateChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateChannelResponse, error)

	// DeleteChannelWithResponse request
	DeleteChannelWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteChannelResponse, error)

	// GetPrioritiesChannelWithResponse request
	GetPrioritiesChannelWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetPrioritiesChannelResponse, error)

	// ListChannelSiteMapsWithResponse request
	ListChannelSiteMapsWithResponse(ctx context.Context, params *ListChannelSiteMapsParams, reqEditors ...RequestEditorFn) (*ListChannelSiteMapsResponse, error)

	// CreateChannelSiteMapWithBodyWithResponse request with any body
	CreateChannelSiteMapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateChannelSiteMapResponse, error)

	CreateChannelSiteMapWithResponse(ctx context.Context, body CreateChannelSiteMapJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateChannelSiteMapResponse, error)

	// UpdateChannelSiteMapWithBodyWithResponse request with any body
	UpdateChannelSiteMapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateChannelSiteMapResponse, error)

	UpdateChannelSiteMapWithResponse(ctx context.Context, body UpdateChannelSiteMapJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateChannelSiteMapResponse, error)

	// ListChannelsForSiteChannelSiteMapWithResponse request
	ListChannelsForSiteChannelSiteMapWithResponse(ctx context.Context, siteId int32, reqEditors ...RequestEditorFn) (*ListChannelsForSiteChannelSiteMapResponse, error)

	// FilterSiteWithResponse request
	FilterSiteWithResponse(ctx context.Context, params *FilterSiteParams, reqEditors ...RequestEditorFn) (*FilterSiteResponse, error)

	// ListSitesWithResponse request
	ListSitesWithResponse(ctx context.Context, params *ListSitesParams, reqEditors ...RequestEditorFn) (*ListSitesResponse, error)

	// CreateSiteWithBodyWithResponse request with any body
	CreateSiteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSiteResponse, error)

	CreateSiteWithResponse(ctx context.Context, body CreateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSiteResponse, error)

	// GetSiteWithResponse request
	GetSiteWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetSiteResponse, error)

	// UpdateSiteWithBodyWithResponse request with any body
	UpdateSiteWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSiteResponse, error)

	UpdateSiteWithResponse(ctx context.Context, id int32, body UpdateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSiteResponse, error)

	// ListZonesWithResponse request
	ListZonesWithResponse(ctx context.Context, params *ListZonesParams, reqEditors ...RequestEditorFn) (*ListZonesResponse, error)

	// CreateZoneWithBodyWithResponse request with any body
	CreateZoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateZoneResponse, error)

	CreateZoneWithResponse(ctx context.Context, body CreateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateZoneResponse, error)

	// GetZoneWithResponse request
	GetZoneWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetZoneResponse, error)

	// UpdateZoneWithBodyWithResponse request with any body
	UpdateZoneWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateZoneResponse, error)

	UpdateZoneWithResponse(ctx context.Context, id int32, body UpdateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateZoneResponse, error)
}

type ListAdTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdTypeList
}

// Status returns HTTPResponse.Status
func (r ListAdTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAdTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAdTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdType
}

// Status returns HTTPResponse.Status
func (r CreateAdTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAdTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelList
}

// Status returns HTTPResponse.Status
func (r ListChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Channel
}

// Status returns HTTPResponse.Status
func (r CreateChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListForChannelAdTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdTypeList
}

// Status returns HTTPResponse.Status
func (r ListForChannelAdTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListForChannelAdTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateForChannelAdTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdType
}

// Status returns HTTPResponse.Status
func (r CreateForChannelAdTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateForChannelAdTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteForChannelAdTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteForChannelAdTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteForChannelAdTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelSiteMapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelSiteMap
}

// Status returns HTTPResponse.Status
func (r GetChannelSiteMapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelSiteMapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChannelSiteMapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteChannelSiteMapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChannelSiteMapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Channel
}

// Status returns HTTPResponse.Status
func (r GetChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Channel
}

// Status returns HTTPResponse.Status
func (r UpdateChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPrioritiesChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Priority
}

// Status returns HTTPResponse.Status
func (r GetPrioritiesChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPrioritiesChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListChannelSiteMapsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelSiteMapList
}

// Status returns HTTPResponse.Status
func (r ListChannelSiteMapsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListChannelSiteMapsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateChannelSiteMapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelSiteMap
}

// Status returns HTTPResponse.Status
func (r CreateChannelSiteMapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateChannelSiteMapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateChannelSiteMapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelSiteMap
}

// Status returns HTTPResponse.Status
func (r UpdateChannelSiteMapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateChannelSiteMapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListChannelsForSiteChannelSiteMapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelList
}

// Status returns HTTPResponse.Status
func (r ListChannelsForSiteChannelSiteMapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListChannelsForSiteChannelSiteMapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilterSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FilterSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilterSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SiteList
}

// Status returns HTTPResponse.Status
func (r ListSitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Site
}

// Status returns HTTPResponse.Status
func (r CreateSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Site
}

// Status returns HTTPResponse.Status
func (r GetSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Site
}

// Status returns HTTPResponse.Status
func (r UpdateSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListZonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneList
}

// Status returns HTTPResponse.Status
func (r ListZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Zone
}

// Status returns HTTPResponse.Status
func (r CreateZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Zone
}

// Status returns HTTPResponse.Status
func (r GetZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Zone
}

// Status returns HTTPResponse.Status
func (r UpdateZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAdTypesWithResponse request returning *ListAdTypesResponse
func (c *ClientWithResponses) ListAdTypesWithResponse(ctx context.Context, params *ListAdTypesParams, reqEditors ...RequestEditorFn) (*ListAdTypesResponse, error) {
	rsp, err := c.ListAdTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAdTypesResponse(rsp)
}

// CreateAdTypeWithBodyWithResponse request with arbitrary body returning *CreateAdTypeResponse
func (c *ClientWithResponses) CreateAdTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAdTypeResponse, error) {
	rsp, err := c.CreateAdTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAdTypeResponse(rsp)
}

func (c *ClientWithResponses) CreateAdTypeWithResponse(ctx context.Context, body CreateAdTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAdTypeResponse, error) {
	rsp, err := c.CreateAdType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAdTypeResponse(rsp)
}

// DeleteAdTypeWithResponse request returning *DeleteAdTypeResponse
func (c *ClientWithResponses) DeleteAdTypeWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAdTypeResponse, error) {
	rsp, err := c.DeleteAdType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdTypeResponse(rsp)
}

// ListChannelsWithResponse request returning *ListChannelsResponse
func (c *ClientWithResponses) ListChannelsWithResponse(ctx context.Context, params *ListChannelsParams, reqEditors ...RequestEditorFn) (*ListChannelsResponse, error) {
	rsp, err := c.ListChannels(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListChannelsResponse(rsp)
}

// CreateChannelWithBodyWithResponse request with arbitrary body returning *CreateChannelResponse
func (c *ClientWithResponses) CreateChannelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateChannelResponse, error) {
	rsp, err := c.CreateChannelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChannelResponse(rsp)
}

func (c *ClientWithResponses) CreateChannelWithResponse(ctx context.Context, body CreateChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateChannelResponse, error) {
	rsp, err := c.CreateChannel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChannelResponse(rsp)
}

// ListForChannelAdTypeWithResponse request returning *ListForChannelAdTypeResponse
func (c *ClientWithResponses) ListForChannelAdTypeWithResponse(ctx context.Context, channelId int32, params *ListForChannelAdTypeParams, reqEditors ...RequestEditorFn) (*ListForChannelAdTypeResponse, error) {
	rsp, err := c.ListForChannelAdType(ctx, channelId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListForChannelAdTypeResponse(rsp)
}

// CreateForChannelAdTypeWithBodyWithResponse request with arbitrary body returning *CreateForChannelAdTypeResponse
func (c *ClientWithResponses) CreateForChannelAdTypeWithBodyWithResponse(ctx context.Context, channelId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateForChannelAdTypeResponse, error) {
	rsp, err := c.CreateForChannelAdTypeWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateForChannelAdTypeResponse(rsp)
}

func (c *ClientWithResponses) CreateForChannelAdTypeWithResponse(ctx context.Context, channelId int32, body CreateForChannelAdTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateForChannelAdTypeResponse, error) {
	rsp, err := c.CreateForChannelAdType(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateForChannelAdTypeResponse(rsp)
}

// DeleteForChannelAdTypeWithResponse request returning *DeleteForChannelAdTypeResponse
func (c *ClientWithResponses) DeleteForChannelAdTypeWithResponse(ctx context.Context, channelId int32, id int32, reqEditors ...RequestEditorFn) (*DeleteForChannelAdTypeResponse, error) {
	rsp, err := c.DeleteForChannelAdType(ctx, channelId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteForChannelAdTypeResponse(rsp)
}

// GetChannelSiteMapWithResponse request returning *GetChannelSiteMapResponse
func (c *ClientWithResponses) GetChannelSiteMapWithResponse(ctx context.Context, channelId int32, siteId int32, reqEditors ...RequestEditorFn) (*GetChannelSiteMapResponse, error) {
	rsp, err := c.GetChannelSiteMap(ctx, channelId, siteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelSiteMapResponse(rsp)
}

// DeleteChannelSiteMapWithResponse request returning *DeleteChannelSiteMapResponse
func (c *ClientWithResponses) DeleteChannelSiteMapWithResponse(ctx context.Context, channelId int32, siteId int32, reqEditors ...RequestEditorFn) (*DeleteChannelSiteMapResponse, error) {
	rsp, err := c.DeleteChannelSiteMap(ctx, channelId, siteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChannelSiteMapResponse(rsp)
}

// GetChannelWithResponse request returning *GetChannelResponse
func (c *ClientWithResponses) GetChannelWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetChannelResponse, error) {
	rsp, err := c.GetChannel(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelResponse(rsp)
}

// UpdateChannelWithBodyWithResponse request with arbitrary body returning *UpdateChannelResponse
func (c *ClientWithResponses) UpdateChannelWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateChannelResponse, error) {
	rsp, err := c.UpdateChannelWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateChannelResponse(rsp)
}

func (c *ClientWithResponses) UpdateChannelWithResponse(ctx context.Context, id int32, body UpdateChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateChannelResponse, error) {
	rsp, err := c.UpdateChannel(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateChannelResponse(rsp)
}

// DeleteChannelWithResponse request returning *DeleteChannelResponse
func (c *ClientWithResponses) DeleteChannelWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteChannelResponse, error) {
	rsp, err := c.DeleteChannel(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChannelResponse(rsp)
}

// GetPrioritiesChannelWithResponse request returning *GetPrioritiesChannelResponse
func (c *ClientWithResponses) GetPrioritiesChannelWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetPrioritiesChannelResponse, error) {
	rsp, err := c.GetPrioritiesChannel(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPrioritiesChannelResponse(rsp)
}

// ListChannelSiteMapsWithResponse request returning *ListChannelSiteMapsResponse
func (c *ClientWithResponses) ListChannelSiteMapsWithResponse(ctx context.Context, params *ListChannelSiteMapsParams, reqEditors ...RequestEditorFn) (*ListChannelSiteMapsResponse, error) {
	rsp, err := c.ListChannelSiteMaps(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListChannelSiteMapsResponse(rsp)
}

// CreateChannelSiteMapWithBodyWithResponse request with arbitrary body returning *CreateChannelSiteMapResponse
func (c *ClientWithResponses) CreateChannelSiteMapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateChannelSiteMapResponse, error) {
	rsp, err := c.CreateChannelSiteMapWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChannelSiteMapResponse(rsp)
}

func (c *ClientWithResponses) CreateChannelSiteMapWithResponse(ctx context.Context, body CreateChannelSiteMapJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateChannelSiteMapResponse, error) {
	rsp, err := c.CreateChannelSiteMap(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChannelSiteMapResponse(rsp)
}

// UpdateChannelSiteMapWithBodyWithResponse request with arbitrary body returning *UpdateChannelSiteMapResponse
func (c *ClientWithResponses) UpdateChannelSiteMapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateChannelSiteMapResponse, error) {
	rsp, err := c.UpdateChannelSiteMapWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateChannelSiteMapResponse(rsp)
}

func (c *ClientWithResponses) UpdateChannelSiteMapWithResponse(ctx context.Context, body UpdateChannelSiteMapJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateChannelSiteMapResponse, error) {
	rsp, err := c.UpdateChannelSiteMap(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateChannelSiteMapResponse(rsp)
}

// ListChannelsForSiteChannelSiteMapWithResponse request returning *ListChannelsForSiteChannelSiteMapResponse
func (c *ClientWithResponses) ListChannelsForSiteChannelSiteMapWithResponse(ctx context.Context, siteId int32, reqEditors ...RequestEditorFn) (*ListChannelsForSiteChannelSiteMapResponse, error) {
	rsp, err := c.ListChannelsForSiteChannelSiteMap(ctx, siteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListChannelsForSiteChannelSiteMapResponse(rsp)
}

// FilterSiteWithResponse request returning *FilterSiteResponse
func (c *ClientWithResponses) FilterSiteWithResponse(ctx context.Context, params *FilterSiteParams, reqEditors ...RequestEditorFn) (*FilterSiteResponse, error) {
	rsp, err := c.FilterSite(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilterSiteResponse(rsp)
}

// ListSitesWithResponse request returning *ListSitesResponse
func (c *ClientWithResponses) ListSitesWithResponse(ctx context.Context, params *ListSitesParams, reqEditors ...RequestEditorFn) (*ListSitesResponse, error) {
	rsp, err := c.ListSites(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSitesResponse(rsp)
}

// CreateSiteWithBodyWithResponse request with arbitrary body returning *CreateSiteResponse
func (c *ClientWithResponses) CreateSiteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSiteResponse, error) {
	rsp, err := c.CreateSiteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSiteResponse(rsp)
}

func (c *ClientWithResponses) CreateSiteWithResponse(ctx context.Context, body CreateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSiteResponse, error) {
	rsp, err := c.CreateSite(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSiteResponse(rsp)
}

// GetSiteWithResponse request returning *GetSiteResponse
func (c *ClientWithResponses) GetSiteWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetSiteResponse, error) {
	rsp, err := c.GetSite(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSiteResponse(rsp)
}

// UpdateSiteWithBodyWithResponse request with arbitrary body returning *UpdateSiteResponse
func (c *ClientWithResponses) UpdateSiteWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSiteResponse, error) {
	rsp, err := c.UpdateSiteWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSiteResponse(rsp)
}

func (c *ClientWithResponses) UpdateSiteWithResponse(ctx context.Context, id int32, body UpdateSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSiteResponse, error) {
	rsp, err := c.UpdateSite(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSiteResponse(rsp)
}

// ListZonesWithResponse request returning *ListZonesResponse
func (c *ClientWithResponses) ListZonesWithResponse(ctx context.Context, params *ListZonesParams, reqEditors ...RequestEditorFn) (*ListZonesResponse, error) {
	rsp, err := c.ListZones(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListZonesResponse(rsp)
}

// CreateZoneWithBodyWithResponse request with arbitrary body returning *CreateZoneResponse
func (c *ClientWithResponses) CreateZoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateZoneResponse, error) {
	rsp, err := c.CreateZoneWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateZoneResponse(rsp)
}

func (c *ClientWithResponses) CreateZoneWithResponse(ctx context.Context, body CreateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateZoneResponse, error) {
	rsp, err := c.CreateZone(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateZoneResponse(rsp)
}

// GetZoneWithResponse request returning *GetZoneResponse
func (c *ClientWithResponses) GetZoneWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetZoneResponse, error) {
	rsp, err := c.GetZone(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneResponse(rsp)
}

// UpdateZoneWithBodyWithResponse request with arbitrary body returning *UpdateZoneResponse
func (c *ClientWithResponses) UpdateZoneWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateZoneResponse, error) {
	rsp, err := c.UpdateZoneWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateZoneResponse(rsp)
}

func (c *ClientWithResponses) UpdateZoneWithResponse(ctx context.Context, id int32, body UpdateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateZoneResponse, error) {
	rsp, err := c.UpdateZone(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateZoneResponse(rsp)
}

// ParseListAdTypesResponse parses an HTTP response from a ListAdTypesWithResponse call
func ParseListAdTypesResponse(rsp *http.Response) (*ListAdTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAdTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAdTypeResponse parses an HTTP response from a CreateAdTypeWithResponse call
func ParseCreateAdTypeResponse(rsp *http.Response) (*CreateAdTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAdTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdTypeResponse parses an HTTP response from a DeleteAdTypeWithResponse call
func ParseDeleteAdTypeResponse(rsp *http.Response) (*DeleteAdTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListChannelsResponse parses an HTTP response from a ListChannelsWithResponse call
func ParseListChannelsResponse(rsp *http.Response) (*ListChannelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateChannelResponse parses an HTTP response from a CreateChannelWithResponse call
func ParseCreateChannelResponse(rsp *http.Response) (*CreateChannelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Channel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListForChannelAdTypeResponse parses an HTTP response from a ListForChannelAdTypeWithResponse call
func ParseListForChannelAdTypeResponse(rsp *http.Response) (*ListForChannelAdTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListForChannelAdTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateForChannelAdTypeResponse parses an HTTP response from a CreateForChannelAdTypeWithResponse call
func ParseCreateForChannelAdTypeResponse(rsp *http.Response) (*CreateForChannelAdTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateForChannelAdTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteForChannelAdTypeResponse parses an HTTP response from a DeleteForChannelAdTypeWithResponse call
func ParseDeleteForChannelAdTypeResponse(rsp *http.Response) (*DeleteForChannelAdTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteForChannelAdTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetChannelSiteMapResponse parses an HTTP response from a GetChannelSiteMapWithResponse call
func ParseGetChannelSiteMapResponse(rsp *http.Response) (*GetChannelSiteMapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChannelSiteMapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelSiteMap
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChannelSiteMapResponse parses an HTTP response from a DeleteChannelSiteMapWithResponse call
func ParseDeleteChannelSiteMapResponse(rsp *http.Response) (*DeleteChannelSiteMapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChannelSiteMapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetChannelResponse parses an HTTP response from a GetChannelWithResponse call
func ParseGetChannelResponse(rsp *http.Response) (*GetChannelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Channel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateChannelResponse parses an HTTP response from a UpdateChannelWithResponse call
func ParseUpdateChannelResponse(rsp *http.Response) (*UpdateChannelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Channel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChannelResponse parses an HTTP response from a DeleteChannelWithResponse call
func ParseDeleteChannelResponse(rsp *http.Response) (*DeleteChannelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPrioritiesChannelResponse parses an HTTP response from a GetPrioritiesChannelWithResponse call
func ParseGetPrioritiesChannelResponse(rsp *http.Response) (*GetPrioritiesChannelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPrioritiesChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Priority
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListChannelSiteMapsResponse parses an HTTP response from a ListChannelSiteMapsWithResponse call
func ParseListChannelSiteMapsResponse(rsp *http.Response) (*ListChannelSiteMapsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListChannelSiteMapsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelSiteMapList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateChannelSiteMapResponse parses an HTTP response from a CreateChannelSiteMapWithResponse call
func ParseCreateChannelSiteMapResponse(rsp *http.Response) (*CreateChannelSiteMapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateChannelSiteMapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelSiteMap
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateChannelSiteMapResponse parses an HTTP response from a UpdateChannelSiteMapWithResponse call
func ParseUpdateChannelSiteMapResponse(rsp *http.Response) (*UpdateChannelSiteMapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateChannelSiteMapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelSiteMap
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListChannelsForSiteChannelSiteMapResponse parses an HTTP response from a ListChannelsForSiteChannelSiteMapWithResponse call
func ParseListChannelsForSiteChannelSiteMapResponse(rsp *http.Response) (*ListChannelsForSiteChannelSiteMapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListChannelsForSiteChannelSiteMapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFilterSiteResponse parses an HTTP response from a FilterSiteWithResponse call
func ParseFilterSiteResponse(rsp *http.Response) (*FilterSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilterSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListSitesResponse parses an HTTP response from a ListSitesWithResponse call
func ParseListSitesResponse(rsp *http.Response) (*ListSitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SiteList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSiteResponse parses an HTTP response from a CreateSiteWithResponse call
func ParseCreateSiteResponse(rsp *http.Response) (*CreateSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSiteResponse parses an HTTP response from a GetSiteWithResponse call
func ParseGetSiteResponse(rsp *http.Response) (*GetSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSiteResponse parses an HTTP response from a UpdateSiteWithResponse call
func ParseUpdateSiteResponse(rsp *http.Response) (*UpdateSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListZonesResponse parses an HTTP response from a ListZonesWithResponse call
func ParseListZonesResponse(rsp *http.Response) (*ListZonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateZoneResponse parses an HTTP response from a CreateZoneWithResponse call
func ParseCreateZoneResponse(rsp *http.Response) (*CreateZoneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Zone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetZoneResponse parses an HTTP response from a GetZoneWithResponse call
func ParseGetZoneResponse(rsp *http.Response) (*GetZoneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Zone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateZoneResponse parses an HTTP response from a UpdateZoneWithResponse call
func ParseUpdateZoneResponse(rsp *http.Response) (*UpdateZoneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Zone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
