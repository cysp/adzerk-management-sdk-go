// Code generated by ogen, DO NOT EDIT.

package client

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// CreateForChannelAdTypeParams is parameters of createForChannelAdType operation.
type CreateForChannelAdTypeParams struct {
	// The Channel Id.
	ChannelId int32
}

func unpackCreateForChannelAdTypeParams(packed middleware.Parameters) (params CreateForChannelAdTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "channelId",
			In:   "path",
		}
		params.ChannelId = packed[key].(int32)
	}
	return params
}

func decodeCreateForChannelAdTypeParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateForChannelAdTypeParams, _ error) {
	// Decode path: channelId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "channelId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ChannelId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "channelId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteAdTypeParams is parameters of deleteAdType operation.
type DeleteAdTypeParams struct {
	// The Ad Type Id.
	ID int32
}

func unpackDeleteAdTypeParams(packed middleware.Parameters) (params DeleteAdTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int32)
	}
	return params
}

func decodeDeleteAdTypeParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteAdTypeParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteChannelParams is parameters of deleteChannel operation.
type DeleteChannelParams struct {
	// The Channel Id to delete.
	ID int32
}

func unpackDeleteChannelParams(packed middleware.Parameters) (params DeleteChannelParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int32)
	}
	return params
}

func decodeDeleteChannelParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteChannelParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteChannelSiteMapParams is parameters of deleteChannelSiteMap operation.
type DeleteChannelSiteMapParams struct {
	// The Channel Id.
	ChannelId int32
	// The Site Id.
	SiteId int32
}

func unpackDeleteChannelSiteMapParams(packed middleware.Parameters) (params DeleteChannelSiteMapParams) {
	{
		key := middleware.ParameterKey{
			Name: "channelId",
			In:   "path",
		}
		params.ChannelId = packed[key].(int32)
	}
	{
		key := middleware.ParameterKey{
			Name: "siteId",
			In:   "path",
		}
		params.SiteId = packed[key].(int32)
	}
	return params
}

func decodeDeleteChannelSiteMapParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteChannelSiteMapParams, _ error) {
	// Decode path: channelId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "channelId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ChannelId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "channelId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: siteId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "siteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.SiteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "siteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteForChannelAdTypeParams is parameters of deleteForChannelAdType operation.
type DeleteForChannelAdTypeParams struct {
	// The Channel Id.
	ChannelId int32
	// The Ad Type Id.
	ID int32
}

func unpackDeleteForChannelAdTypeParams(packed middleware.Parameters) (params DeleteForChannelAdTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "channelId",
			In:   "path",
		}
		params.ChannelId = packed[key].(int32)
	}
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int32)
	}
	return params
}

func decodeDeleteForChannelAdTypeParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteForChannelAdTypeParams, _ error) {
	// Decode path: channelId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "channelId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ChannelId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "channelId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// FilterSiteParams is parameters of filterSite operation.
type FilterSiteParams struct {
	// Filters the stream of sites based on the Title. This is a simple match - if the string provided in
	// the query parameter is present anywhere in a site's Title, that site will be returned in the
	// results.
	TitleLike OptNilString
	// Filters the stream of sites based on the Url. This is a simple match - if the string provided in
	// the query parameter is present anywhere in a site's Url, that site will be returned in the results.
	UrlLike OptNilString
}

func unpackFilterSiteParams(packed middleware.Parameters) (params FilterSiteParams) {
	{
		key := middleware.ParameterKey{
			Name: "titleLike",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TitleLike = v.(OptNilString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "urlLike",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UrlLike = v.(OptNilString)
		}
	}
	return params
}

func decodeFilterSiteParams(args [0]string, argsEscaped bool, r *http.Request) (params FilterSiteParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: titleLike.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "titleLike",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTitleLikeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTitleLikeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TitleLike.SetTo(paramsDotTitleLikeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "titleLike",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: urlLike.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "urlLike",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUrlLikeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUrlLikeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.UrlLike.SetTo(paramsDotUrlLikeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "urlLike",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetChannelParams is parameters of getChannel operation.
type GetChannelParams struct {
	// The Channel Id.
	ID int32
}

func unpackGetChannelParams(packed middleware.Parameters) (params GetChannelParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int32)
	}
	return params
}

func decodeGetChannelParams(args [1]string, argsEscaped bool, r *http.Request) (params GetChannelParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetChannelSiteMapParams is parameters of getChannelSiteMap operation.
type GetChannelSiteMapParams struct {
	// The Channel Id.
	ChannelId int32
	// The Site Id.
	SiteId int32
}

func unpackGetChannelSiteMapParams(packed middleware.Parameters) (params GetChannelSiteMapParams) {
	{
		key := middleware.ParameterKey{
			Name: "channelId",
			In:   "path",
		}
		params.ChannelId = packed[key].(int32)
	}
	{
		key := middleware.ParameterKey{
			Name: "siteId",
			In:   "path",
		}
		params.SiteId = packed[key].(int32)
	}
	return params
}

func decodeGetChannelSiteMapParams(args [2]string, argsEscaped bool, r *http.Request) (params GetChannelSiteMapParams, _ error) {
	// Decode path: channelId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "channelId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ChannelId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "channelId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: siteId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "siteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.SiteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "siteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetPrioritiesChannelParams is parameters of getPrioritiesChannel operation.
type GetPrioritiesChannelParams struct {
	// The Channel Id to get Priorities for.
	ID int32
}

func unpackGetPrioritiesChannelParams(packed middleware.Parameters) (params GetPrioritiesChannelParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int32)
	}
	return params
}

func decodeGetPrioritiesChannelParams(args [1]string, argsEscaped bool, r *http.Request) (params GetPrioritiesChannelParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetSiteParams is parameters of getSite operation.
type GetSiteParams struct {
	// The Site Id.
	ID int32
}

func unpackGetSiteParams(packed middleware.Parameters) (params GetSiteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int32)
	}
	return params
}

func decodeGetSiteParams(args [1]string, argsEscaped bool, r *http.Request) (params GetSiteParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetZoneParams is parameters of getZone operation.
type GetZoneParams struct {
	// The Site Id.
	ID int32
}

func unpackGetZoneParams(packed middleware.Parameters) (params GetZoneParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int32)
	}
	return params
}

func decodeGetZoneParams(args [1]string, argsEscaped bool, r *http.Request) (params GetZoneParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListAdTypesParams is parameters of listAdTypes operation.
type ListAdTypesParams struct {
	// The size of the page to be returned.
	PageSize OptNilInt32
	// The page number to be returned.
	Page OptNilInt32
}

func unpackListAdTypesParams(packed middleware.Parameters) (params ListAdTypesParams) {
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptNilInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptNilInt32)
		}
	}
	return params
}

func decodeListAdTypesParams(args [0]string, argsEscaped bool, r *http.Request) (params ListAdTypesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: pageSize.
	{
		val := int32(500)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListChannelSiteMapsParams is parameters of listChannelSiteMaps operation.
type ListChannelSiteMapsParams struct {
	// The size of the page to be returned.
	PageSize OptNilInt32
	// The page number to be returned.
	Page OptNilInt32
}

func unpackListChannelSiteMapsParams(packed middleware.Parameters) (params ListChannelSiteMapsParams) {
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptNilInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptNilInt32)
		}
	}
	return params
}

func decodeListChannelSiteMapsParams(args [0]string, argsEscaped bool, r *http.Request) (params ListChannelSiteMapsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: pageSize.
	{
		val := int32(500)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListChannelsParams is parameters of listChannels operation.
type ListChannelsParams struct {
	// The size of the page to be returned.
	PageSize OptNilInt32
	// The page number to be returned.
	Page OptNilInt32
}

func unpackListChannelsParams(packed middleware.Parameters) (params ListChannelsParams) {
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptNilInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptNilInt32)
		}
	}
	return params
}

func decodeListChannelsParams(args [0]string, argsEscaped bool, r *http.Request) (params ListChannelsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: pageSize.
	{
		val := int32(500)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListChannelsForSiteChannelSiteMapParams is parameters of listChannelsForSiteChannelSiteMap operation.
type ListChannelsForSiteChannelSiteMapParams struct {
	// The Site Id.
	SiteId int32
}

func unpackListChannelsForSiteChannelSiteMapParams(packed middleware.Parameters) (params ListChannelsForSiteChannelSiteMapParams) {
	{
		key := middleware.ParameterKey{
			Name: "siteId",
			In:   "path",
		}
		params.SiteId = packed[key].(int32)
	}
	return params
}

func decodeListChannelsForSiteChannelSiteMapParams(args [1]string, argsEscaped bool, r *http.Request) (params ListChannelsForSiteChannelSiteMapParams, _ error) {
	// Decode path: siteId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "siteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.SiteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "siteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListForChannelAdTypeParams is parameters of listForChannelAdType operation.
type ListForChannelAdTypeParams struct {
	// The size of the page to be returned.
	PageSize OptNilInt32
	// The page number to be returned.
	Page OptNilInt32
	// The Channel Id.
	ChannelId int32
}

func unpackListForChannelAdTypeParams(packed middleware.Parameters) (params ListForChannelAdTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptNilInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptNilInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "channelId",
			In:   "path",
		}
		params.ChannelId = packed[key].(int32)
	}
	return params
}

func decodeListForChannelAdTypeParams(args [1]string, argsEscaped bool, r *http.Request) (params ListForChannelAdTypeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: pageSize.
	{
		val := int32(500)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Decode path: channelId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "channelId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ChannelId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "channelId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListSitesParams is parameters of listSites operation.
type ListSitesParams struct {
	// The size of the page to be returned.
	PageSize OptNilInt32
	// The page number to be returned.
	Page OptNilInt32
}

func unpackListSitesParams(packed middleware.Parameters) (params ListSitesParams) {
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptNilInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptNilInt32)
		}
	}
	return params
}

func decodeListSitesParams(args [0]string, argsEscaped bool, r *http.Request) (params ListSitesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: pageSize.
	{
		val := int32(500)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListZonesParams is parameters of listZones operation.
type ListZonesParams struct {
	// The size of the page to be returned.
	PageSize OptNilInt32
	// The page number to be returned.
	Page OptNilInt32
}

func unpackListZonesParams(packed middleware.Parameters) (params ListZonesParams) {
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptNilInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptNilInt32)
		}
	}
	return params
}

func decodeListZonesParams(args [0]string, argsEscaped bool, r *http.Request) (params ListZonesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: pageSize.
	{
		val := int32(500)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateChannelParams is parameters of updateChannel operation.
type UpdateChannelParams struct {
	// The Channel Id.
	ID int32
}

func unpackUpdateChannelParams(packed middleware.Parameters) (params UpdateChannelParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int32)
	}
	return params
}

func decodeUpdateChannelParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateChannelParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateSiteParams is parameters of updateSite operation.
type UpdateSiteParams struct {
	// The Site Id.
	ID int32
}

func unpackUpdateSiteParams(packed middleware.Parameters) (params UpdateSiteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int32)
	}
	return params
}

func decodeUpdateSiteParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateSiteParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateZoneParams is parameters of updateZone operation.
type UpdateZoneParams struct {
	// The Site Id.
	ID int32
}

func unpackUpdateZoneParams(packed middleware.Parameters) (params UpdateZoneParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int32)
	}
	return params
}

func decodeUpdateZoneParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateZoneParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
