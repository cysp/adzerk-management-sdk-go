// Code generated by ogen, DO NOT EDIT.

package client

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"
			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "adtypes"
				if l := len("adtypes"); len(elem) >= l && elem[0:l] == "adtypes" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListAdTypesRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateAdTypeRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/delete"
						if l := len("/delete"); len(elem) >= l && elem[0:l] == "/delete" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleDeleteAdTypeRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 'c': // Prefix: "channel"
				if l := len("channel"); len(elem) >= l && elem[0:l] == "channel" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListChannelsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateChannelRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "channelId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetChannelRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateChannelRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "adtypes"
							if l := len("adtypes"); len(elem) >= l && elem[0:l] == "adtypes" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleListForChannelAdTypeRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "POST":
									s.handleCreateForChannelAdTypeRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/delete"
									if l := len("/delete"); len(elem) >= l && elem[0:l] == "/delete" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleDeleteForChannelAdTypeRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							}
						case 'd': // Prefix: "delete"
							if l := len("delete"); len(elem) >= l && elem[0:l] == "delete" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleDeleteChannelRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'p': // Prefix: "priorities"
							if l := len("priorities"); len(elem) >= l && elem[0:l] == "priorities" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetPrioritiesChannelRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 's': // Prefix: "site/"
							if l := len("site/"); len(elem) >= l && elem[0:l] == "site/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "siteId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetChannelSiteMapRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/delete"
								if l := len("/delete"); len(elem) >= l && elem[0:l] == "/delete" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleDeleteChannelSiteMapRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				case 'S': // Prefix: "Site"
					if l := len("Site"); len(elem) >= l && elem[0:l] == "Site" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleListChannelSiteMapsRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateChannelSiteMapRequest([0]string{}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateChannelSiteMapRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST,PUT")
						}

						return
					}
				case 's': // Prefix: "sInSite/"
					if l := len("sInSite/"); len(elem) >= l && elem[0:l] == "sInSite/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "siteId"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleListChannelsForSiteChannelSiteMapRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				}
			case 'f': // Prefix: "fast/site"
				if l := len("fast/site"); len(elem) >= l && elem[0:l] == "fast/site" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleFilterSiteRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 's': // Prefix: "site"
				if l := len("site"); len(elem) >= l && elem[0:l] == "site" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListSitesRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateSiteRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetSiteRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateSiteRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,PUT")
						}

						return
					}
				}
			case 'z': // Prefix: "zone"
				if l := len("zone"); len(elem) >= l && elem[0:l] == "zone" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListZonesRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateZoneRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetZoneRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateZoneRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,PUT")
						}

						return
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"
			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "adtypes"
				if l := len("adtypes"); len(elem) >= l && elem[0:l] == "adtypes" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListAdTypes"
						r.operationID = "listAdTypes"
						r.pathPattern = "/v1/adtypes"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateAdType"
						r.operationID = "createAdType"
						r.pathPattern = "/v1/adtypes"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/delete"
						if l := len("/delete"); len(elem) >= l && elem[0:l] == "/delete" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: DeleteAdType
								r.name = "DeleteAdType"
								r.operationID = "deleteAdType"
								r.pathPattern = "/v1/adtypes/{id}/delete"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'c': // Prefix: "channel"
				if l := len("channel"); len(elem) >= l && elem[0:l] == "channel" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListChannels"
						r.operationID = "listChannels"
						r.pathPattern = "/v1/channel"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateChannel"
						r.operationID = "createChannel"
						r.pathPattern = "/v1/channel"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "channelId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetChannel"
							r.operationID = "getChannel"
							r.pathPattern = "/v1/channel/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = "UpdateChannel"
							r.operationID = "updateChannel"
							r.pathPattern = "/v1/channel/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "adtypes"
							if l := len("adtypes"); len(elem) >= l && elem[0:l] == "adtypes" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "ListForChannelAdType"
									r.operationID = "listForChannelAdType"
									r.pathPattern = "/v1/channel/{channelId}/adtypes"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									r.name = "CreateForChannelAdType"
									r.operationID = "createForChannelAdType"
									r.pathPattern = "/v1/channel/{channelId}/adtypes"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/delete"
									if l := len("/delete"); len(elem) >= l && elem[0:l] == "/delete" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: DeleteForChannelAdType
											r.name = "DeleteForChannelAdType"
											r.operationID = "deleteForChannelAdType"
											r.pathPattern = "/v1/channel/{channelId}/adtypes/{id}/delete"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}
								}
							}
						case 'd': // Prefix: "delete"
							if l := len("delete"); len(elem) >= l && elem[0:l] == "delete" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: DeleteChannel
									r.name = "DeleteChannel"
									r.operationID = "deleteChannel"
									r.pathPattern = "/v1/channel/{id}/delete"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 'p': // Prefix: "priorities"
							if l := len("priorities"); len(elem) >= l && elem[0:l] == "priorities" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: GetPrioritiesChannel
									r.name = "GetPrioritiesChannel"
									r.operationID = "getPrioritiesChannel"
									r.pathPattern = "/v1/channel/{id}/priorities"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 's': // Prefix: "site/"
							if l := len("site/"); len(elem) >= l && elem[0:l] == "site/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "siteId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetChannelSiteMap"
									r.operationID = "getChannelSiteMap"
									r.pathPattern = "/v1/channel/{channelId}/site/{siteId}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/delete"
								if l := len("/delete"); len(elem) >= l && elem[0:l] == "/delete" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: DeleteChannelSiteMap
										r.name = "DeleteChannelSiteMap"
										r.operationID = "deleteChannelSiteMap"
										r.pathPattern = "/v1/channel/{channelId}/site/{siteId}/delete"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				case 'S': // Prefix: "Site"
					if l := len("Site"); len(elem) >= l && elem[0:l] == "Site" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: ListChannelSiteMaps
							r.name = "ListChannelSiteMaps"
							r.operationID = "listChannelSiteMaps"
							r.pathPattern = "/v1/channelSite"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							// Leaf: CreateChannelSiteMap
							r.name = "CreateChannelSiteMap"
							r.operationID = "createChannelSiteMap"
							r.pathPattern = "/v1/channelSite"
							r.args = args
							r.count = 0
							return r, true
						case "PUT":
							// Leaf: UpdateChannelSiteMap
							r.name = "UpdateChannelSiteMap"
							r.operationID = "updateChannelSiteMap"
							r.pathPattern = "/v1/channelSite"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 's': // Prefix: "sInSite/"
					if l := len("sInSite/"); len(elem) >= l && elem[0:l] == "sInSite/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "siteId"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: ListChannelsForSiteChannelSiteMap
							r.name = "ListChannelsForSiteChannelSiteMap"
							r.operationID = "listChannelsForSiteChannelSiteMap"
							r.pathPattern = "/v1/channelsInSite/{siteId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				}
			case 'f': // Prefix: "fast/site"
				if l := len("fast/site"); len(elem) >= l && elem[0:l] == "fast/site" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: FilterSite
						r.name = "FilterSite"
						r.operationID = "filterSite"
						r.pathPattern = "/v1/fast/site"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 's': // Prefix: "site"
				if l := len("site"); len(elem) >= l && elem[0:l] == "site" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListSites"
						r.operationID = "listSites"
						r.pathPattern = "/v1/site"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateSite"
						r.operationID = "createSite"
						r.pathPattern = "/v1/site"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: GetSite
							r.name = "GetSite"
							r.operationID = "getSite"
							r.pathPattern = "/v1/site/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							// Leaf: UpdateSite
							r.name = "UpdateSite"
							r.operationID = "updateSite"
							r.pathPattern = "/v1/site/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				}
			case 'z': // Prefix: "zone"
				if l := len("zone"); len(elem) >= l && elem[0:l] == "zone" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListZones"
						r.operationID = "listZones"
						r.pathPattern = "/v1/zone"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateZone"
						r.operationID = "createZone"
						r.pathPattern = "/v1/zone"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: GetZone
							r.name = "GetZone"
							r.operationID = "getZone"
							r.pathPattern = "/v1/zone/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							// Leaf: UpdateZone
							r.name = "UpdateZone"
							r.operationID = "updateZone"
							r.pathPattern = "/v1/zone/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				}
			}
		}
	}
	return r, false
}
